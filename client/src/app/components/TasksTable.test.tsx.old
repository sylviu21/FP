import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import configureMockStore from 'redux-mock-store';
import { Provider } from 'react-redux';

import TasksTable from './TasksTable';
import { useAppSelector } from 'app/custom-hooks';

jest.mock('app/custom-hooks', () => ({
  useAppSelector: jest.fn(),
  useAppDispatch: () => jest.fn(),
}));

const mockStore = configureMockStore([]);

describe('TasksTable', () => {
  const mockTasks = [
    {
      id: 1,
      name: 'Task 1',
      description: 'Description 1',
      status: 'Pending',
      dateAdded: '2023-08-01T12:00:00.000Z',
    },
    {
      id: 2,
      name: 'Task 2',
      description: 'Description 2',
      status: 'In Progress',
      dateAdded: '2023-08-02T12:00:00.000Z',
    },
    {
      id: 3,
      name: 'Task 3',
      description: 'Description 3',
      status: 'Done',
      dateAdded: '2023-08-03T12:00:00.000Z',
    },
  ];

  const mockProjects = [
    {
      id: 1,
      name: 'Project 1',
      timeSpent: 0,
    },
  ];

  const mockSelectedProject = {
    id: 1,
    timeSpent: 0,
  };

  beforeEach(() => {
    (useAppSelector as jest.Mock).mockReturnValue({
      tasks: mockTasks,
      selectedProject: mockSelectedProject,
      projects: [],
    });
  });

  it('should render the tasks table', () => {
    const store = mockStore({
      tasks: {
        tasks: mockTasks,
      },
    });

    render(
      <Provider store={store}>
        <TasksTable />
      </Provider>
    );

    expect(screen.getByTestId('tasks-table')).toBeInTheDocument();
  });

  it('should filter tasks by status', () => {
    const store = mockStore({
      tasks: {
        tasks: mockTasks,
      },
    });

    render(
      <Provider store={store}>
        <TasksTable />
      </Provider>
    );

    fireEvent.click(screen.getAllByText('Done')[0]);

    expect(screen.getByText('Task 3')).toBeInTheDocument();
    expect(screen.queryByText('Task 1')).not.toBeInTheDocument();
    expect(screen.queryByText('Task 2')).not.toBeInTheDocument();
  });

  it('should show the AddEditTaskForm modal when adding a new task', () => {
    const store = mockStore({
      tasks: {
        tasks: mockTasks,
      },
    });

    render(
      <Provider store={store}>
        <TasksTable />
      </Provider>
    );

    fireEvent.click(screen.getByText('Add Task'));

    expect(screen.getByText('Add new task')).toBeInTheDocument();
  });

  it('should show the AddEditTaskForm modal when editing a task', () => {
    const store = mockStore({
      tasks: {
        tasks: mockTasks,
      },
      projects: {
        projects: mockProjects,
      },
    });

    render(
      <Provider store={store}>
        <TasksTable />
      </Provider>
    );

    fireEvent.click(screen.getAllByTestId('task-edit-btn')[0]);

    expect(screen.getByText('Edit task')).toBeInTheDocument();
  });
});
